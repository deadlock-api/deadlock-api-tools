name: Rust Docker Images

env:
  CARGO_TERM_COLOR: always

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
    paths:
      - 'Dockerfile'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'common/**'
      - 'salt-scraper/**'
      - 'hltv-scraper/**'
      - 'ingest-worker/**'
      - 'matchdata-downloader/**'
      - 'active-matches-scraper/**'
      - 'builds-fetcher/**'
      - 'history-fetcher/**'
      - 'steam-profile-fetcher/**'
      - 'update-assets-tables/**'
      - 'glicko-mmr/**'

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  fmt:
    name: Format
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Update Rust toolchain
        run: |
          rustup override set stable
          rustup update stable
          rustup component add rustfmt
      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Protocol Buffers compiler
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: protobuf-compiler libprotobuf-dev clang mold
          version: 1.0
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-cache-${{ runner.os }}-${{ runner.arch }}"
      - name: Update Rust toolchain
        run: |
          rustup override set stable
          rustup update stable
          rustup component add clippy
      - name: Cargo Clippy
        run: cargo clippy --all-targets --locked --all-features -- -D warnings

  build-base:
    runs-on: ubuntu-24.04-arm
    outputs:
      image-id: ${{ steps.build-base.outputs.imageid }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Base Image
        id: build-base
        uses: docker/build-push-action@v6
        with:
          platforms: linux/arm64
          push: false
          tags: ghcr.io/${{ github.repository }}/rust-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/rust-base.tar
      - name: Upload Base Image
        uses: actions/upload-artifact@v4
        with:
          name: rust-base-image
          path: /tmp/rust-base.tar
          retention-days: 1

  build-and-push-components:
    runs-on: ubuntu-24.04-arm
    needs: build-base
    strategy:
      matrix:
        component:
          - salt-scraper
          - hltv-scraper
          - ingest-worker
          - matchdata-downloader
          - active-matches-scraper
          - builds-fetcher
          - history-fetcher
          - steam-profile-fetcher
          - update-assets-tables
          - glicko-mmr
    steps:
      - uses: actions/checkout@v4
      - name: Filter changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            change: [ '${{ matrix.component }}/**', 'common/**', 'Cargo.toml', 'Cargo.lock', 'Dockerfile' ]
      - name: Check if component should build
        id: should_deploy
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ steps.changes.outputs['change'] }}" == "true" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi
      - name: Set up Docker
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: docker/setup-docker-action@v4
      - name: Login to GitHub Container Registry
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download Base Image
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: actions/download-artifact@v4
        with:
          name: rust-base-image
          path: /tmp
      - name: Load Base Image
        if: steps.should_deploy.outputs.deploy == 'true'
        run: |
          docker load --input /tmp/rust-base.tar
          docker tag ghcr.io/${{ github.repository }}/rust-base:latest ghcr.io/${{ github.repository }}/${{ matrix.component }}:latest
      - name: Build and Push Component
        if: steps.should_deploy.outputs.deploy == 'true'
        run: docker push ghcr.io/${{ github.repository }}/${{ matrix.component }}:latest
